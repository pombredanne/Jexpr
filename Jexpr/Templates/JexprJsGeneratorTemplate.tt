<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Jexpr" #>
<#@ import namespace="Jexpr.Core" #>
<#@ import namespace="Jexpr.Models" #>
<#@ import namespace="Jexpr.Core.Impl" #>

function ExpFunc(parametersJson) {

	var p = JSON.parse(parametersJson);
	var result = { value:'' };
	
	<#
		IJsStringBuilder builder = new JsStringBuilder();
		IJsExpressionConcatService concatService = new JsExpressionConcatService(builder);
	#>
	<#
		var expressionGroup = this.ExpressionMetadata.Items.First();
		//Priority = true
		var hasPExprs = concatService.ConcatCompiledExpressions(expressionGroup.Criteria.Where(expression => expression.HasPriority).ToList(), expressionGroup.Operator);
		var jshasPExprsBody = concatService.ConcatJsExpressionBody(hasPExprs, this.ExpressionMetadata.Operator);
	 #>

	 <# /* BODY START */ #>
	if (<#= !string.IsNullOrEmpty(jshasPExprsBody) ? jshasPExprsBody :"true" #>){
		<# 
		   var hasntPExprs = concatService.ConcatCompiledExpressions(expressionGroup.Criteria.Where(expression => !expression.HasPriority).ToList(), expressionGroup.Operator);
		   var jshasntPExprsBody = concatService.ConcatJsExpressionBody(hasntPExprs, this.ExpressionMetadata.Operator);
		 #>
		 <# if (this.ExpressionMetadata.ResultExpression == null){ #>
		 result.value =<#= jshasntPExprsBody #>
		 <# }else{ #>
		 <#= jshasntPExprsBody #>
		 <# } #>
	
	<# /* BODY END */ #>
	
	<# if (this.ExpressionMetadata.ResultExpression != null){ #>
	<# /*RESULT EXPR START */ #>

		<# 
		var resultExpGroup = this.ExpressionMetadata.ResultExpression.First();
		var resultExp = resultExpGroup.Criteria.First();
		string resultExpJs = builder.BuildFrom(resultExp);
		 #>

		  try {
			<#= resultExpJs #>
		  }
		  catch(exception){
		     /*TODO: handle exc.*/
		  }
	<# /*RESULT EXPR END */ #>
	<# }#>
	}

	 return JSON.stringify(result);
}